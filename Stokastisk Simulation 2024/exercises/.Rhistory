conf_interval <- function(alpha, x){
n = length(x)
mu_est = mean(x)
s_theta_sq = abs(1/(n-1)*(sum(x^2)-n*mu_est^2))
s_theta = sqrt(s_theta_sq)
conf_int = c(mu_est + s_theta/sqrt(n)*qt(alpha/2,n-1),mu_est + s_theta/sqrt(n)*qt(1-alpha/2,n-1))
cat("mu_est", round(mu_est,4), "\n")
cat("conf_int", round(conf_int,4), "\n")
return(c(mu_est, conf_int))
}
n <- 100
U <- runif(n=n, min=0, max=1)
#### 1. Crude Monte Carlo ####
X <- exp(U)
conf_inf_est1 <- conf_interval(0.05,X)
####. 2. Antithetic variables ####
Y <- (exp(U) + exp(1-U))/2
conf_inf_est2 <- conf_interval(0.05,Y)
#### 3. Control variable ####
c <- -cov(X,U)/var(U)
Z <- X + c*(U-1/2)
conf_inf_est3 <- conf_interval(0.05,Z)
#### 4. Stratified sampling ####
strata <- 10
W <- vector()
for(i in 1:strata){
sum_term <- 0
U_small <- runif(n=10, min=0, max=1)
for(j in 1:strata){
sum_term <- sum_term + (exp((j-1)/strata + U_small[j]/strata))
}
W[i] <- sum_term/strata
}
conf_inf_est4 <- conf_interval(0.05,W)
## Summary
conf_intervals <- matrix(c(conf_inf_est1, conf_inf_est2, conf_inf_est3, conf_inf_est4),
nrow=4, ncol=3, byrow=TRUE)
colnames(conf_intervals) = c('Estimated mean', 'Lower', 'Upper')
rownames(conf_intervals) <- c('Crude Monte Carlo', 'Antithetic variables', 'Control variable', 'Stratisfied sampling')
conf_intervals_table <- as.table(conf_intervals)
conf_intervals_table
#### 1. Crude Monte Carlo ####
X <- exp(U)
conf_inf_est1 <- conf_interval(0.05,X)
sample <- exp(1)^runif(draws)
#### 1. Crude Monte Carlo ####
X <- exp(U)
conf_inf_est1 <- conf_interval(0.05,X)
####. 2. Antithetic variables ####
Y <- (exp(U) + exp(1-U))/2
conf_inf_est2 <- conf_interval(0.05,Y)
n <- 100
U <- runif(n=n)
#### 1. Crude Monte Carlo ####
X <- exp(U)
conf_inf_est1 <- conf_interval(0.05,X)
####. 2. Antithetic variables ####
Y <- (exp(U) + exp(1-U))/2
conf_inf_est2 <- conf_interval(0.05,Y)
#### 3. Control variable ####
c <- -cov(X,U)/var(U)
Z <- X + c*(U-1/2)
conf_inf_est3 <- conf_interval(0.05,Z)
#### 4. Stratified sampling ####
strata <- 10
W <- vector()
for(i in 1:strata){
sum_term <- 0
U_small <- runif(n=10, min=0, max=1)
for(j in 1:strata){
sum_term <- sum_term + (exp((j-1)/strata + U_small[j]/strata))
}
W[i] <- sum_term/strata
}
conf_inf_est4 <- conf_interval(0.05,W)
## Summary
conf_intervals <- matrix(c(conf_inf_est1, conf_inf_est2, conf_inf_est3, conf_inf_est4),
nrow=4, ncol=3, byrow=TRUE)
colnames(conf_intervals) = c('Estimated mean', 'Lower', 'Upper')
rownames(conf_intervals) <- c('Crude Monte Carlo', 'Antithetic variables', 'Control variable', 'Stratisfied sampling')
conf_intervals_table <- as.table(conf_intervals)
conf_intervals_table
set.seed(43)
conf_interval <- function(alpha, x){
n = length(x)
mu_est = mean(x)
s_theta_sq = abs(1/(n-1)*(sum(x^2)-n*mu_est^2))
s_theta = sqrt(s_theta_sq)
conf_int = c(mu_est + s_theta/sqrt(n)*qt(alpha/2,n-1),mu_est + s_theta/sqrt(n)*qt(1-alpha/2,n-1))
cat("mu_est", round(mu_est,4), "\n")
cat("conf_int", round(conf_int,4), "\n")
return(c(mu_est, conf_int))
}
n <- 100
U <- runif(n=n)
#### 1. Crude Monte Carlo ####
X <- exp(U)
conf_inf_est1 <- conf_interval(0.05,X)
####. 2. Antithetic variables ####
Y <- (exp(U) + exp(1-U))/2
conf_inf_est2 <- conf_interval(0.05,Y)
#### 3. Control variable ####
c <- -cov(X,U)/var(U)
Z <- X + c*(U-1/2)
conf_inf_est3 <- conf_interval(0.05,Z)
#### 4. Stratified sampling ####
strata <- 10
W <- vector()
for(i in 1:strata){
sum_term <- 0
U_small <- runif(n=10, min=0, max=1)
for(j in 1:strata){
sum_term <- sum_term + (exp((j-1)/strata + U_small[j]/strata))
}
W[i] <- sum_term/strata
}
conf_inf_est4 <- conf_interval(0.05,W)
## Summary
conf_intervals <- matrix(c(conf_inf_est1, conf_inf_est2, conf_inf_est3, conf_inf_est4),
nrow=4, ncol=3, byrow=TRUE)
colnames(conf_intervals) = c('Estimated mean', 'Lower', 'Upper')
rownames(conf_intervals) <- c('Crude Monte Carlo', 'Antithetic variables', 'Control variable', 'Stratisfied sampling')
conf_intervals_table <- as.table(conf_intervals)
conf_intervals_table
set.seed(43)
n <- 100
U <- runif(n=n)
#### 1. Crude Monte Carlo ####
X <- exp(U)
conf_inf_est1 <- conf_interval(0.05,X)
####. 2. Antithetic variables ####
Y <- (exp(U) + exp(1-U))/2
conf_inf_est2 <- conf_interval(0.05,Y)
#### 3. Control variable ####
c <- -cov(X,U)/var(U)
Z <- X + c*(U-1/2)
conf_inf_est3 <- conf_interval(0.05,Z)
#### 4. Stratified sampling ####
strata <- 10
W <- vector()
for(i in 1:strata){
sum_term <- 0
U_small <- runif(n=10, min=0, max=1)
for(j in 1:strata){
sum_term <- sum_term + (exp((j-1)/strata + U_small[j]/strata))
}
W[i] <- sum_term/strata
}
conf_inf_est4 <- conf_interval(0.05,W)
## Summary
conf_intervals <- matrix(c(conf_inf_est1, conf_inf_est2, conf_inf_est3, conf_inf_est4),
nrow=4, ncol=3, byrow=TRUE)
colnames(conf_intervals) = c('Estimated mean', 'Lower', 'Upper')
rownames(conf_intervals) <- c('Crude Monte Carlo', 'Antithetic variables', 'Control variable', 'Stratisfied sampling')
conf_intervals_table <- as.table(conf_intervals)
conf_intervals_table
#### 4. Stratified sampling ####
strata <- 10
W <- vector()
for(i in 1:strata){
sum_term <- 0
U_small <- U[(i-1)*10+1:i*10]
for(j in 1:strata){
sum_term <- sum_term + (exp((j-1)/strata + U_small[j]/strata))
}
W[i] <- sum_term/strata
}
conf_inf_est4 <- conf_interval(0.05,W)
## Summary
conf_intervals <- matrix(c(conf_inf_est1, conf_inf_est2, conf_inf_est3, conf_inf_est4),
nrow=4, ncol=3, byrow=TRUE)
colnames(conf_intervals) = c('Estimated mean', 'Lower', 'Upper')
rownames(conf_intervals) <- c('Crude Monte Carlo', 'Antithetic variables', 'Control variable', 'Stratisfied sampling')
conf_intervals_table <- as.table(conf_intervals)
conf_intervals_table
length(U)
U[100]
for(i in 1:strata){
print(U[(i-1)*10+1:i*10])
}
#### 4. Stratified sampling ####
strata <- 10
W <- vector()
for(i in 1:strata){
sum_term <- 0
U_small <- U[(i-1)*10+1:i*10]
print(U_small)
for(j in 1:strata){
sum_term <- sum_term + (exp((j-1)/strata + U_small[j]/strata))
}
W[i] <- sum_term/strata
}
#### 4. Stratified sampling ####
strata <- 10
W <- vector()
for(i in 1:strata){
sum_term <- 0
U_small <- U[((i-1)*10+1):(i*10)]
print(U_small)
for(j in 1:strata){
sum_term <- sum_term + (exp((j-1)/strata + U_small[j]/strata))
}
W[i] <- sum_term/strata
}
conf_inf_est4 <- conf_interval(0.05,W)
set.seed(43)
n <- 100
U <- runif(n=n)
#### 4. Stratified sampling ####
strata <- 10
W <- vector()
for(i in 1:strata){
sum_term <- 0
U_small <- U[((i-1)*10+1):(i*10)]
print(U_small)
for(j in 1:strata){
sum_term <- sum_term + (exp((j-1)/strata + U_small[j]/strata))
}
W[i] <- sum_term/strata
}
conf_inf_est4 <- conf_interval(0.05,W)
## Summary
conf_intervals <- matrix(c(conf_inf_est1, conf_inf_est2, conf_inf_est3, conf_inf_est4),
nrow=4, ncol=3, byrow=TRUE)
colnames(conf_intervals) = c('Estimated mean', 'Lower', 'Upper')
rownames(conf_intervals) <- c('Crude Monte Carlo', 'Antithetic variables', 'Control variable', 'Stratisfied sampling')
conf_intervals_table <- as.table(conf_intervals)
conf_intervals_table
#### 5. Control variates for exercise 4 ####
# Function to simulate the blocking system table
simulate_blocking_system_control <- function(num_customers, m, mean_service_time, mean_time_between_customers) {
blocked <- vector()
num_customers_processed <- 0
interarrival_time <- vector()
arrival_time <- 0
service_end_times <- numeric(m)
for (i in 1:num_customers) {
# Time until next arrival
interarrival_time[i] <- rexp(1, rate = 1/mean_time_between_customers)
arrival_time <- arrival_time + interarrival_time[i]
# Check if there is an available server
available_server <- which(service_end_times <= arrival_time)
if (length(available_server) > 0) {
# Time the service takes
service_time <- rexp(1, rate = 1/mean_service_time)
# Assign to the first available server
service_end_times[available_server[1]] <- arrival_time + service_time
num_customers_processed <- num_customers_processed + 1
blocked[i] <- 0
} else {
# No available servers, customer is blocked
blocked[i] <- 1
}
}
X <- blocked
Y <- interarrival_time
c <- -cov(X,Y)/var(Y)
Z <- blocked + c*(interarrival_time - mean_time_between_customers)
fraction_blocked <- sum(blocked) / num_customers
fraction_Z <- sum(Z) / num_customers
#fraction_blocked <- sum(blocked) / num_customers
return(list(X=X, Y=Y, Z=Z, c=c, fraction_blocked=fraction_blocked, fraction_Z=fraction_Z))
}
# Parameters
alpha <- 0.05
m <- 10
mean_service_time <- 8
mean_time_between_customers <- 1
num_costumers <- 10000
num_simulations <- 10
# Run simulation and get values for X, Y and c
blocked_sim <- simulate_blocking_system_control(num_costumers, m, mean_service_time, mean_time_between_customers)
X <- blocked_sim$X
Y <- blocked_sim$Y
Y <- blocked_sim$Z
c <- blocked_sim$c
fractions_blocked <- blocked_sim$fraction_blocked
fraction_Z <- blocked_sim$fraction_Z
# Run simulations
blocked_sim_list <- list()
for (i in 1:num_simulations) {
blocked_sim_list[[i]] <- simulate_blocking_system_control(num_costumers, m, mean_service_time, mean_time_between_customers)
}
# Extract original blockec value and Z value
fractions_blocked <- vector()
fractions_Z <- vector()
for(i in 1:length(blocked_sim_list)){
fractions_blocked[i] <- blocked_sim_list[[i]]$fraction_blocked
fractions_Z[i] <- blocked_sim_list[[i]]$fraction_Z
}
conf_orig <- conf_interval(alpha, fractions_blocked)
conf_control <- conf_interval(alpha, fractions_Z)
conf_orig_interval <- conf_orig[3]-conf_orig[2]
conf_control_interval <- conf_control[3]-conf_control[2]
conf_Z <- matrix(round(c(conf_orig, conf_orig_interval, conf_control, conf_control_interval),4),
nrow=2, ncol=4, byrow=TRUE)
colnames(conf_Z) <- c('Estimated mean', 'Lower', 'Upper', 'Interval')
rownames(conf_Z) <- c('Original', 'Control variate')
as.table(conf_Z)
abs(var(fractions_blocked)-var(fractions_Z))/var(fractions_Z)
#### 6. Common random numbers. ####
U <- runif(10000)
interarrival_time <- runif(10000)
low_ind <- which(interarrival_time<=0.2)
high_ind <- which(interarrival_time>0.2)
interarrival_time[low_ind] <- -log(U[low_ind])/5.0
interarrival_time[high_ind] <- -log(U[high_ind])/0.8333
mean(interarrival_time)
mean(-log(U) / (1/mean_time_between_customers))
mean_time_between_customers
#### 6. Common random numbers. ####
U <- runif(10000)
interarrival_time <- runif(10000)
low_ind <- which(interarrival_time<=0.2)
high_ind <- which(interarrival_time>0.2)
interarrival_time[low_ind] <- -log(U[low_ind])/5.0
interarrival_time[high_ind] <- -log(U[high_ind])/0.8333
mean(-log(U) / (1/mean_time_between_customers))
mean(interarrival_time)
mean(-log(U) / (1/mean_time_between_customers))
interarrival_time[low_ind] <- log(U[low_ind])/5.0
interarrival_time[high_ind] <- log(U[high_ind])/0.8333
interarrival_time
mean(interarrival_time)
