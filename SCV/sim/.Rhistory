# final model
lm4 = lm(normcon~tempdiff+ID+rain+hum+wind_spd+pressure+ weekday+tempdiff*ID+tempdiff*rain+tempdiff*hum+tempdiff*wind_spd+tempdiff*pressure+tempdiff*weekday,data = dfWG)
library(kableExtra)
lm4s <- summary(lm4, correlation = TRUE)
kable_styling( kable(lm4s$correlation, digits = 3), full_width = FALSE)
## Intercepts
A_int <- cbind(ones, zeros, #initial intercept and slope
ID, rain, hum, wind, pres, w, #intercepts
matrix(0,n,n-1), zeros, zeros, zeros, zeros, matrix(0,n,6)) #slope
est <- A_int %*% lm4s$coefficients[,1]
var_est <- A_int %*% lm4s$cov.unscaled %*% t(A_int) * lm4s$sigma^2
coef_int <- data.frame(Group=levels(dfWG$ID), Intercept = est, sd.error=sqrt(diag(var_est)))
View(coef_int)
A_slope <- cbind(ones, zeros, #initial intercept and slope
matrix(0,n,n-1), zeros, zeros, zeros, zeros, matrix(0,n,6),
ID, rain, hum, wind, pres, w) #slope
est <- A_slope %*% lm4s$coefficients[,1]
var_est <- A_slope %*% lm4s$cov.unscaled %*% t(A_slope) * lm4s$sigma^2
coef_slope <- data.frame(Group=levels(dfWG$ID), Slope = est, sd.error=sqrt(diag(var_est)))
View(coef_slope)
## Slopes
A_slope <- cbind(ones, zeros, #initial intercept and slope
matrix(0,n,n-1), rain, hum, wind, pres, matrix(0,n,6),
ID, rain, hum, wind, pres, w) #slope
est <- A_slope %*% lm4s$coefficients[,1]
var_est <- A_slope %*% lm4s$cov.unscaled %*% t(A_slope) * lm4s$sigma^2
coef_slope <- data.frame(Group=levels(dfWG$ID), Slope = est, sd.error=sqrt(diag(var_est)))
View(coef_slope)
## Intercepts
A_int <- cbind(ones, zeros, #initial intercept and slope
ID, rain, hum, wind, pres, w, #intercepts
matrix(0,n,n-1), rain, hum, wind, pres, matrix(0,n,6)) #slope
est <- A_int %*% lm4s$coefficients[,1]
var_est <- A_int %*% lm4s$cov.unscaled %*% t(A_int) * lm4s$sigma^2
coef_int <- data.frame(Group=levels(dfWG$ID), Intercept = est, sd.error=sqrt(diag(var_est)))
## Slopes
A_slope <- cbind(ones, zeros, #initial intercept and slope
matrix(0,n,n-1), rain, hum, wind, pres, matrix(0,n,6),
ID, rain, hum, wind, pres, w) #slope
est <- A_slope %*% lm4s$coefficients[,1]
var_est <- A_slope %*% lm4s$cov.unscaled %*% t(A_slope) * lm4s$sigma^2
coef_slope <- data.frame(Group=levels(dfWG$ID), Slope = est, sd.error=sqrt(diag(var_est)))
View(coef_slope)
max(coef_slope[,2])
min(coef_slope[,2])
View(coef_slope)
max(coef_slope[,2])
# Initial intercept: rain0, weekday1
ids <- unique(dfWG$ID)
n <- length(ids)
ones <- rep(1,n)
zeros <- rep(0,n)
# varibales
x_rain <- 1 #0 if no rain, 1 if rain
x_hum <- 20 #humidity level
x_wind <- 15 #wind speed
x_pres <- 800 #pressure level
weekday <- 3 #weekday number
# vectors
ID <- diag(n)
ID <- ID[,-1]
rain <- rep(x_rain,n)
hum <- rep(x_hum,n)
wind <- rep(x_wind,n)
pres <- rep(x_pres,n)
w <- matrix(0,n,6)
w[,weekday] <- rep(1,n)
A <- cbind(ones, ones, #initial intercept and slope
ID, rain, hum, wind, pres, w, #intercepts
ID, rain, hum, wind, pres, w) #slope
# final model
lm4 = lm(normcon~tempdiff+ID+rain+hum+wind_spd+pressure+ weekday+tempdiff*ID+tempdiff*rain+tempdiff*hum+tempdiff*wind_spd+tempdiff*pressure+tempdiff*weekday,data = dfWG)
library(kableExtra)
lm4s <- summary(lm4, correlation = TRUE)
kable_styling( kable(lm4s$correlation, digits = 3), full_width = FALSE)
## Intercepts
A_int <- cbind(ones, zeros, #initial intercept and slope
ID, rain, hum, wind, pres, w, #intercepts
matrix(0,n,n-1), rain, hum, wind, pres, matrix(0,n,6)) #slope
est <- A_int %*% lm4s$coefficients[,1]
var_est <- A_int %*% lm4s$cov.unscaled %*% t(A_int) * lm4s$sigma^2
coef_int <- data.frame(Group=levels(dfWG$ID), Intercept = est, sd.error=sqrt(diag(var_est)))
## Slopes
A_slope <- cbind(ones, zeros, #initial intercept and slope
matrix(0,n,n-1), rain, hum, wind, pres, matrix(0,n,6),
ID, rain, hum, wind, pres, w) #slope
est <- A_slope %*% lm4s$coefficients[,1]
var_est <- A_slope %*% lm4s$cov.unscaled %*% t(A_slope) * lm4s$sigma^2
coef_slope <- data.frame(Group=levels(dfWG$ID), Slope = est, sd.error=sqrt(diag(var_est)))
max(coef_slope[,2])
min(coef_slope[,2])
# Initial intercept: rain0, weekday1
ids <- unique(dfWG$ID)
n <- length(ids)
ones <- rep(1,n)
zeros <- rep(0,n)
# varibales
x_rain <- 0 #0 if no rain, 1 if rain
x_hum <- 73 #humidity level
x_wind <- 15 #wind speed
x_pres <- 1015 #pressure level
weekday <- 3 #weekday number
# vectors
ID <- diag(n)
ID <- ID[,-1]
rain <- rep(x_rain,n)
hum <- rep(x_hum,n)
wind <- rep(x_wind,n)
pres <- rep(x_pres,n)
w <- matrix(0,n,6)
w[,weekday] <- rep(1,n)
A <- cbind(ones, ones, #initial intercept and slope
ID, rain, hum, wind, pres, w, #intercepts
ID, rain, hum, wind, pres, w) #slope
# final model
lm4 = lm(normcon~tempdiff+ID+rain+hum+wind_spd+pressure+ weekday+tempdiff*ID+tempdiff*rain+tempdiff*hum+tempdiff*wind_spd+tempdiff*pressure+tempdiff*weekday,data = dfWG)
library(kableExtra)
lm4s <- summary(lm4, correlation = TRUE)
kable_styling( kable(lm4s$correlation, digits = 3), full_width = FALSE)
## Intercepts
A_int <- cbind(ones, zeros, #initial intercept and slope
ID, rain, hum, wind, pres, w, #intercepts
matrix(0,n,n-1), rain, hum, wind, pres, matrix(0,n,6)) #slope
est <- A_int %*% lm4s$coefficients[,1]
var_est <- A_int %*% lm4s$cov.unscaled %*% t(A_int) * lm4s$sigma^2
coef_int <- data.frame(Group=levels(dfWG$ID), Intercept = est, sd.error=sqrt(diag(var_est)))
## Slopes
A_slope <- cbind(ones, zeros, #initial intercept and slope
matrix(0,n,n-1), rain, hum, wind, pres, matrix(0,n,6),
ID, rain, hum, wind, pres, w) #slope
est <- A_slope %*% lm4s$coefficients[,1]
var_est <- A_slope %*% lm4s$cov.unscaled %*% t(A_slope) * lm4s$sigma^2
coef_slope <- data.frame(Group=levels(dfWG$ID), Slope = est, sd.error=sqrt(diag(var_est)))
max(coef_slope[,2])
min(coef_slope[,2])
max(coef_slope[,2])
min(coef_slope[,2])
# Initial intercept: rain0, weekday1
ids <- unique(dfWG$ID)
n <- length(ids)
ones <- rep(1,n)
zeros <- rep(0,n)
# varibales
x_rain <- 1 #0 if no rain, 1 if rain
x_hum <- 73 #humidity level
x_wind <- 15 #wind speed
x_pres <- 1015 #pressure level
weekday <- 3 #weekday number
# vectors
ID <- diag(n)
ID <- ID[,-1]
rain <- rep(x_rain,n)
hum <- rep(x_hum,n)
wind <- rep(x_wind,n)
pres <- rep(x_pres,n)
w <- matrix(0,n,6)
w[,weekday] <- rep(1,n)
A <- cbind(ones, ones, #initial intercept and slope
ID, rain, hum, wind, pres, w, #intercepts
ID, rain, hum, wind, pres, w) #slope
# final model
lm4 = lm(normcon~tempdiff+ID+rain+hum+wind_spd+pressure+ weekday+tempdiff*ID+tempdiff*rain+tempdiff*hum+tempdiff*wind_spd+tempdiff*pressure+tempdiff*weekday,data = dfWG)
library(kableExtra)
lm4s <- summary(lm4, correlation = TRUE)
kable_styling( kable(lm4s$correlation, digits = 3), full_width = FALSE)
## Intercepts
A_int <- cbind(ones, zeros, #initial intercept and slope
ID, rain, hum, wind, pres, w, #intercepts
matrix(0,n,n-1), rain, hum, wind, pres, matrix(0,n,6)) #slope
est <- A_int %*% lm4s$coefficients[,1]
var_est <- A_int %*% lm4s$cov.unscaled %*% t(A_int) * lm4s$sigma^2
coef_int <- data.frame(Group=levels(dfWG$ID), Intercept = est, sd.error=sqrt(diag(var_est)))
## Slopes
A_slope <- cbind(ones, zeros, #initial intercept and slope
matrix(0,n,n-1), rain, hum, wind, pres, matrix(0,n,6),
ID, rain, hum, wind, pres, w) #slope
est <- A_slope %*% lm4s$coefficients[,1]
var_est <- A_slope %*% lm4s$cov.unscaled %*% t(A_slope) * lm4s$sigma^2
coef_slope <- data.frame(Group=levels(dfWG$ID), Slope = est, sd.error=sqrt(diag(var_est)))
max(coef_slope[,2])
min(coef_slope[,2])
# Initial intercept: rain0, weekday1
ids <- unique(dfWG$ID)
n <- length(ids)
ones <- rep(1,n)
zeros <- rep(0,n)
# varibales
x_rain <- 0 #0 if no rain, 1 if rain
x_hum <- 73 #humidity level
x_wind <- 15 #wind speed
x_pres <- 1015 #pressure level
weekday <- 3 #weekday number
# vectors
ID <- diag(n)
ID <- ID[,-1]
rain <- rep(x_rain,n)
hum <- rep(x_hum,n)
wind <- rep(x_wind,n)
pres <- rep(x_pres,n)
w <- matrix(0,n,6)
w[,weekday] <- rep(1,n)
A <- cbind(ones, ones, #initial intercept and slope
ID, rain, hum, wind, pres, w, #intercepts
ID, rain, hum, wind, pres, w) #slope
# final model
lm4 = lm(normcon~tempdiff+ID+rain+hum+wind_spd+pressure+ weekday+tempdiff*ID+tempdiff*rain+tempdiff*hum+tempdiff*wind_spd+tempdiff*pressure+tempdiff*weekday,data = dfWG)
library(kableExtra)
lm4s <- summary(lm4, correlation = TRUE)
kable_styling( kable(lm4s$correlation, digits = 3), full_width = FALSE)
## Intercepts
A_int <- cbind(ones, zeros, #initial intercept and slope
ID, rain, hum, wind, pres, w, #intercepts
matrix(0,n,n-1), rain, hum, wind, pres, matrix(0,n,6)) #slope
est <- A_int %*% lm4s$coefficients[,1]
var_est <- A_int %*% lm4s$cov.unscaled %*% t(A_int) * lm4s$sigma^2
coef_int <- data.frame(Group=levels(dfWG$ID), Intercept = est, sd.error=sqrt(diag(var_est)))
## Slopes
A_slope <- cbind(ones, zeros, #initial intercept and slope
matrix(0,n,n-1), rain, hum, wind, pres, matrix(0,n,6),
ID, rain, hum, wind, pres, w) #slope
est <- A_slope %*% lm4s$coefficients[,1]
var_est <- A_slope %*% lm4s$cov.unscaled %*% t(A_slope) * lm4s$sigma^2
coef_slope <- data.frame(Group=levels(dfWG$ID), Slope = est, sd.error=sqrt(diag(var_est)))
max(coef_slope[,2])
min(coef_slope[,2])
# Initial intercept: rain0, weekday1
ids <- unique(dfWG$ID)
n <- length(ids)
ones <- rep(1,n)
zeros <- rep(0,n)
# varibales
x_rain <- 1 #0 if no rain, 1 if rain
x_hum <- 73 #humidity level
x_wind <- 15 #wind speed
x_pres <- 1015 #pressure level
weekday <- 3 #weekday number
# vectors
ID <- diag(n)
ID <- ID[,-1]
rain <- rep(x_rain,n)
hum <- rep(x_hum,n)
wind <- rep(x_wind,n)
pres <- rep(x_pres,n)
w <- matrix(0,n,6)
w[,weekday] <- rep(1,n)
A <- cbind(ones, ones, #initial intercept and slope
ID, rain, hum, wind, pres, w, #intercepts
ID, rain, hum, wind, pres, w) #slope
# final model
lm4 = lm(normcon~tempdiff+ID+rain+hum+wind_spd+pressure+ weekday+tempdiff*ID+tempdiff*rain+tempdiff*hum+tempdiff*wind_spd+tempdiff*pressure+tempdiff*weekday,data = dfWG)
library(kableExtra)
lm4s <- summary(lm4, correlation = TRUE)
kable_styling( kable(lm4s$correlation, digits = 3), full_width = FALSE)
## Intercepts
A_int <- cbind(ones, zeros, #initial intercept and slope
ID, rain, hum, wind, pres, w, #intercepts
matrix(0,n,n-1), zeros, zeros, zeros, zeros, matrix(0,n,6)) #slope
est <- A_int %*% lm4s$coefficients[,1]
var_est <- A_int %*% lm4s$cov.unscaled %*% t(A_int) * lm4s$sigma^2
coef_int <- data.frame(Group=levels(dfWG$ID), Intercept = est, sd.error=sqrt(diag(var_est)))
## Slopes
A_slope <- cbind(ones, zeros, #initial intercept and slope
matrix(0,n,n-1), rain, hum, wind, pres, matrix(0,n,6),
ID, rain, hum, wind, pres, w) #slope
est <- A_slope %*% lm4s$coefficients[,1]
var_est <- A_slope %*% lm4s$cov.unscaled %*% t(A_slope) * lm4s$sigma^2
coef_slope <- data.frame(Group=levels(dfWG$ID), Slope = est, sd.error=sqrt(diag(var_est)))
max(coef_slope[,2])
min(coef_slope[,2])
# Initial intercept: rain0, weekday1
ids <- unique(dfWG$ID)
n <- length(ids)
ones <- rep(1,n)
zeros <- rep(0,n)
# varibales
x_rain <- 1 #0 if no rain, 1 if rain
x_hum <- 73 #humidity level
x_wind <- 15 #wind speed
x_pres <- 1015 #pressure level
weekday <- 3 #weekday number
# vectors
ID <- diag(n)
ID <- ID[,-1]
rain <- rep(x_rain,n)
hum <- rep(x_hum,n)
wind <- rep(x_wind,n)
pres <- rep(x_pres,n)
w <- matrix(0,n,6)
w[,weekday] <- rep(1,n)
A <- cbind(ones, ones, #initial intercept and slope
ID, rain, hum, wind, pres, w, #intercepts
ID, rain, hum, wind, pres, w) #slope
# final model
lm4 = lm(normcon~tempdiff+ID+rain+hum+wind_spd+pressure+ weekday+tempdiff*ID+tempdiff*rain+tempdiff*hum+tempdiff*wind_spd+tempdiff*pressure+tempdiff*weekday,data = dfWG)
library(kableExtra)
lm4s <- summary(lm4, correlation = TRUE)
kable_styling( kable(lm4s$correlation, digits = 3), full_width = FALSE)
## Intercepts
A_int <- cbind(ones, zeros, #initial intercept and slope
ID, rain, hum, wind, pres, w, #intercepts
matrix(0,n,n-1), zeros, zeros, zeros, zeros, matrix(0,n,6)) #slope
est <- A_int %*% lm4s$coefficients[,1]
var_est <- A_int %*% lm4s$cov.unscaled %*% t(A_int) * lm4s$sigma^2
coef_int <- data.frame(Group=levels(dfWG$ID), Intercept = est, sd.error=sqrt(diag(var_est)))
## Slopes
A_slope <- cbind(ones, zeros, #initial intercept and slope
matrix(0,n,n-1), zeros, zeros, zeros, zeros, matrix(0,n,6),
ID, rain, hum, wind, pres, w) #slope
est <- A_slope %*% lm4s$coefficients[,1]
var_est <- A_slope %*% lm4s$cov.unscaled %*% t(A_slope) * lm4s$sigma^2
coef_slope <- data.frame(Group=levels(dfWG$ID), Slope = est, sd.error=sqrt(diag(var_est)))
max(coef_slope[,2])
min(coef_slope[,2])
# Initial intercept: rain0, weekday1
ids <- unique(dfWG$ID)
n <- length(ids)
ones <- rep(1,n)
zeros <- rep(0,n)
# varibales
x_rain <- 1 #0 if no rain, 1 if rain
x_hum <- 73 #humidity level
x_wind <- 15 #wind speed
x_pres <- 1015 #pressure level
weekday <- 3 #weekday number
# vectors
ID <- diag(n)
ID <- ID[,-1]
rain <- rep(x_rain,n)
hum <- rep(x_hum,n)
wind <- rep(x_wind,n)
pres <- rep(x_pres,n)
w <- matrix(0,n,6)
w[,weekday] <- rep(1,n)
A <- cbind(ones, ones, #initial intercept and slope
ID, rain, hum, wind, pres, w, #intercepts
ID, rain, hum, wind, pres, w) #slope
# final model
lm4 = lm(normcon~tempdiff+ID+rain+hum+wind_spd+pressure+ weekday+tempdiff*ID+tempdiff*rain+tempdiff*hum+tempdiff*wind_spd+tempdiff*pressure+tempdiff*weekday,data = dfWG)
library(kableExtra)
lm4s <- summary(lm4, correlation = TRUE)
kable_styling( kable(lm4s$correlation, digits = 3), full_width = FALSE)
## Intercepts
A_int <- cbind(ones, zeros, #initial intercept and slope
ID, rain, hum, wind, pres, w, #intercepts
matrix(0,n,n-1), zeros, zeros, zeros, zeros, matrix(0,n,6)) #slope
est <- A_int %*% lm4s$coefficients[,1]
var_est <- A_int %*% lm4s$cov.unscaled %*% t(A_int) * lm4s$sigma^2
coef_int <- data.frame(Group=levels(dfWG$ID), Intercept = est, sd.error=sqrt(diag(var_est)))
## Slopes
A_slope <- cbind(zeros, ones, #initial intercept and slope
matrix(0,n,n-1), zeros, zeros, zeros, zeros, matrix(0,n,6),
ID, rain, hum, wind, pres, w) #slope
est <- A_slope %*% lm4s$coefficients[,1]
var_est <- A_slope %*% lm4s$cov.unscaled %*% t(A_slope) * lm4s$sigma^2
coef_slope <- data.frame(Group=levels(dfWG$ID), Slope = est, sd.error=sqrt(diag(var_est)))
max(coef_slope[,2])
min(coef_slope[,2])
summary(lm4)
View(coef_int)
## Intercepts
A_int <- cbind(ones, zeros, #initial intercept and slope
ID, #intercepts
matrix(0,n,n-1)) #slope
est <- A_int %*% lm4s$coefficients[,1]
summary(lm4)
## Intercepts
A_int <- cbind(ones, zeros, #initial intercept and slope
ID, #intercepts
matrix(0,n,n-1)) #slope
est <- A_int %*% lm4s$coefficients[,1]
length(A_int)
length(lm4s$coefficients[,1])
plot_year <- function(year){
as.character(year)
year_str <- substr(names(monthdata_sorted),1,4)
year_num <- match(year_str, year)
month_list <- (monthdata_sorted[year_num==1])
month_list_short <- month_list[-which(sapply(month_list, is.null))]
par(mfrow=c(2,6))
for(name in names(month_list_short)){
plot_simpel(month_list_short[[name]])
}
}
plot_year(2017)
######################## Start på tidsrækkeanalyse ########################
library(raster)
library(foreign)
# install.packages("forecast")
library(forecast)
source("cool_funcs.R")
rm()
rm()
rsession-ld-library-path=/opt/gurobi650/linux64/lib
h''
hhh
jj
setwd("~/Desktop/EPFL/SCV/main-project-cjs/src/sim")
## High-dimensional simulation, n=100 and p=1000
library(bestsubset)
library(L0Learn)
source("../adaptive_lasso.R")
glmnet.control(fdev=0)
# Set some overall simulation parameters
n = 100; p = 1000 # Size of training set, and number of predictors
nval = n # Size of validation set
nrep = 10 # Number of repetitions for a given setting
seed = 0 # Random number generator seed
s = 10 # Number of nonzero coefficients
type.vec = c(1:3,5) # Simulation settings to consider
rho.vec = c(0,0.35,0.7) # Pairwise predictor correlations
snr.vec = exp(seq(log(0.05),log(6),length=10)) # Signal-to-noise ratios
stem = paste0("sim.n",n,".p",p)
# Regression functions: lasso, forward stepwise, relaxed lasso, elastic net and adaptive lasso
reg.funs = list()
reg.funs[["Lasso"]] = function(x,y) lasso(x,y,intercept=FALSE,nlam=100)
reg.funs[["Forward stepwise"]] = function(x,y) fs(x,y,intercept=FALSE,
max=50)
reg.funs[["Relaxed lasso"]] = function(x,y) lasso(x,y,intercept=FALSE,
nrelax=10,nlam=50)
reg.funs[["Elastic Net"]] = function(x,y) lasso(x,y,alpha = 0.5, intercept=FALSE,
nlam=50)
reg.funs[["Adaptive Lasso"]] = function(x,y) adaptive_lasso(x,y,intercept=FALSE,nlam=50)
## NOTE: the loop below was not run in serial, it was in fact was split up
## and run on a Linux cluster
file.list = c() # Vector of files for the saved rds files
for (beta.type in type.vec) {
for (rho in rho.vec) {
name = paste0(stem, ".beta", beta.type, sprintf(".rho%0.2f", rho))
for (snr in snr.vec) {
file = paste0("rds/hi10/", name, ".snr", round(snr,2), ".rds")
cat("..... NEW SIMULATION .....\n")
cat("--------------------------\n")
cat(paste0("File: ", file, "\n\n"))
sim.master(n, p, nval, reg.funs=reg.funs, nrep=nrep, seed=seed, s=s,
verbose=TRUE, file=file, rho=rho, beta.type=beta.type, snr=snr)
file.list = c(file.list, file)
cat("\n")
}
}
}
save(list=ls(), file=paste0("rds/hi10/",stem,".rda"))
##############################
# Run the code below to reproduce the figures without rerunning the sims
library(bestsubset)
n = 100; p = 1000
file.list = system(paste0("ls rds/hi10/sim.n",n,".p",p,".*.rds"),intern=TRUE)
method.nums = c(2,1,3,4,5)
method.names = c("Forward stepwise","Lasso","Relaxed lasso", "Elastic net", "Adaptive lasso")
# Validation tuning
plot.from.file(file.list, what="risk", rel.to=NULL, tuning="val",
method.nums=method.nums, method.names=method.names,
main=paste0("n=",n,", p=",p,", s=",s), make.pdf=TRUE,
fig.dir="fig/val",
file.name=paste0("sim.n",n,".p",p,".val.risk.rel"))
plot.from.file(file.list, what="error", rel.to=NULL, tuning="val",
method.nums=method.nums, method.names=method.names,
main=paste0("n=",n,", p=",p,", s=",s), make.pdf=TRUE,
fig.dir="fig/val",
file.name=paste0("sim.n",n,".p",p,".val.err.rel"))
plot.from.file(file.list, what="prop", tuning="val",
method.nums=method.nums, method.names=method.names,
main=paste0("n=",n,", p=",p,", s=",s), make.pdf=TRUE,
fig.dir="fig/val",
file.name=paste0("sim.n",n,".p",p,".val.prop"))
plot.from.file(file.list, what="nonzero", tuning="val",
method.nums=method.nums, method.names=method.names,
main=paste0("n=",n,", p=",p,", s=",s), make.pdf=TRUE,
fig.dir="fig/val",
file.name=paste0("sim.n",n,".p",p,".val.nzs"))
# Oracle tuning
plot.from.file(file.list, what="risk", rel.to=NULL, tuning="ora",
method.nums=method.nums, method.names=method.names,
main=paste0("n=",n,", p=",p,", s=",s), make.pdf=TRUE,
fig.dir="fig/ora",
file.name=paste0("sim.n",n,".p",p,".ora.risk.rel"))
plot.from.file(file.list, what="error", rel.to=NULL, tuning="ora",
method.nums=method.nums, method.names=method.names,
main=paste0("n=",n,", p=",p,", s=",s), make.pdf=TRUE,
fig.dir="fig/ora",
file.name=paste0("sim.n",n,".p",p,".ora.err.rel"))
plot.from.file(file.list, what="prop", tuning="ora",
method.nums=method.nums, method.names=method.names,
main=paste0("n=",n,", p=",p,", s=",s), make.pdf=TRUE,
fig.dir="fig/ora",
file.name=paste0("sim.n",n,".p",p,".ora.prop"))
plot.from.file(file.list, what="nonzero", tuning="ora",
method.nums=method.nums, method.names=method.names,
main=paste0("n=",n,", p=",p,", s=",s), make.pdf=TRUE,
fig.dir="fig/ora",
file.name=paste0("sim.n",n,".p",p,".ora.nzs"))
## plots for high-dimensional simulation, s=10
library(bestsubset)
n = 100; p = 1000
file.list = system(paste0("ls ","rds/hi10/*.rds"),intern=TRUE)
method.nums = c(2,1,3,4,5)
method.names = c("Forward stepwise","Lasso","Relaxed lasso", "Elastic net", "Adaptive lasso")
plot.from.file(file.list, what="error", rel.to=NULL, tuning="val",
method.nums=method.nums, method.names=method.names,
legend.pos="bottom", make.pdf=TRUE, fig.dir="fig/hi10",
file.name="hi10.err")
plot.from.file(file.list, what="prop", rel.to=NULL, tuning="val",
method.nums=method.nums, method.names=method.names,
legend.pos="bottom", make.pdf=TRUE, fig.dir="fig/hi10",
file.name="hi10.prop")
plot.from.file(file.list, what="nonzero", rel.to=NULL, tuning="val",
method.nums=method.nums, method.names=method.names,
legend.pos="bottom", make.pdf=TRUE, fig.dir="fig/hi10",
file.name="hi10.nzs")
plot.from.file(file.list, what="F", rel.to=NULL, tuning="val",
method.nums=method.nums, method.names=method.names,
legend.pos="bottom", make.pdf=TRUE, fig.dir="fig/hi10",
file.name="hi10.F")
